import { Geist, Geist_Mono, PT_Serif } from "next/font/google";
import Link from "next/link";

import "./globals.css";
import { Toaster } from "@/components/ui/sonner";
import { cookies } from "next/headers";
import { redirect } from "next/navigation";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const ptSerif = PT_Serif({
  weight: ["400", "700"],
  subsets: ["latin"],
  display: "swap",
  variable: "--font-pt-serif",
});

const fontFamily = `${geistSans.variable}, ${geistMono.variable}, ${ptSerif.variable}`;

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({ children }) {
  const isTokenPresent = await cookies().has("token"); //cookies().has("token"); // Check if token exists in cookies

  console.log("isTokenPresent: ", isTokenPresent);

  // const handleLogout = async () => {
  //   const cookieStore = cookies();
  //   cookieStore.delete("token", { path: "/" });
  //   cookieStore.delete("user", { path: "/" });
  //   cookieStore.delete("userId", { path: "/" });
  //   cookieStore.delete("userName", { path: "/" });
  //   currentwindow.location.reload(); //refresh page

  //   //refresh page
  // };
  return (
    <html
      lang="en"
      className={ptSerif.className}
      style={{ "--font-custom": fontFamily }}
    >
      <body className="relative font-custom">
        <header
          className="h-16 bg-gray-300 w-full flex items-center justify-between px-4 sm:px-6 lg:px-8"
          // Removed inline style attribute
        >
          {/* Left side: Logo and Desktop Navigation */}
          <div className="flex items-center space-x-4 md:space-x-8">
            <Link href="/" className="flex-shrink-0">
              <svg
                viewBox="0 0 410 170" // Updated: Increased height (170) to fit content reaching y=155 (147 + stroke/2). Increased width slightly for padding.
                xmlns="http://www.w3.org/2000/svg"
                className="h-10 w-auto text-[#202A29] hover:cursor-pointer"
                fill="none"
                stroke="currentColor"
                strokeWidth="16" // Consider if this width looks good at h-10 size
                strokeLinecap="round"
              >
                <path d="M110,70 C95,70 80,85 80,105 C80,125 95,140 110,140 L140,140" />
                <path d="M160,87 C170,75 190,75 200,85 C210,95 210,105 200,115 L190,120 C180,130 180,140 190,150 C200,160 220,160 230,147" />
                <path d="M250,70 L250,140 M250,85 C270,85 280,95 280,105 C280,115 270,125 250,125" />
                <path d="M300,70 L300,140 M300,100 C300,100 310,90 320,90 C330,90 340,100 340,110 L340,140" />
                <path d="M390,105 C390,125 375,140 360,140 C345,140 330,125 330,105 C330,85 345,70 360,70 C375,70 390,85 390,105 z M330,105 L390,105" />
                <circle cx="220" cy="50" r="12" fill="currentColor" />
              </svg>
            </Link>
            <nav className="hidden md:flex md:items-center md:space-x-6">
              {!isTokenPresent ? (
                <>
                  <a
                    href="#"
                    className="text-sm font-medium text-[#202A29] hover:text-gray-700"
                  >
                    Solutions
                  </a>
                  <a
                    href="#"
                    className="text-sm font-medium text-[#202A29] hover:text-gray-700"
                  >
                    Industries
                  </a>
                  <a
                    href="#"
                    className="text-sm font-medium text-[#202A29] hover:text-gray-700"
                  >
                    About us
                  </a>
                </>
              ) : (
                <></>
              )}
            </nav>
          </div>

          <div className="flex items-center space-x-3">
            <button className="bg-[#E0E5E4] text-[#202A29] px-4 py-2 rounded-lg hover:bg-[#CCD3D2] text-sm font-medium">
              {isTokenPresent ? (
                <button>Log out</button>
              ) : (
                <>
                  {/* <button className="hidden sm:inline-block bg-[#202A29] text-white px-4 py-2 rounded-lg hover:bg-[#2D3B3A] text-sm font-medium">
                    Contact
                  </button> */}
                  <Link href="/login">Log in</Link>
                </>
              )}
            </button>
            <div className="md:hidden">
              <button
                type="button"
                // onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)} // Add state toggle later
                className="inline-flex items-center justify-center p-2 rounded-md text-[#202A29] hover:text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500" // Example styling
                aria-controls="mobile-menu"
                aria-expanded="false" // This should be dynamic based on state {isMobileMenuOpen}
              >
                <span className="sr-only">Open main menu</span>
                {/* Heroicon Menu (or your preferred icon) */}
                {/* {isMobileMenuOpen ? <XIcon/> : <MenuIcon/>} */}
                <svg
                  className="h-6 w-6"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  aria-hidden="true"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 6h16M4 12h16m-7 6h7"
                  />
                </svg>
              </button>
            </div>
          </div>

          {/* --- Mobile Menu (Needs State Management) --- */}
          {/* This section would be conditionally rendered based on isMobileMenuOpen state */}
          {/* <div className={`${isMobileMenuOpen ? 'block' : 'hidden'} md:hidden`} id="mobile-menu">
        <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-gray-300 absolute left-0 right-0 shadow-lg">
          <a href="#" className="block px-3 py-2 rounded-md text-base font-medium text-[#202A29] hover:text-gray-700 hover:bg-gray-100">Solutions</a>
          <a href="#" className="block px-3 py-2 rounded-md text-base font-medium text-[#202A29] hover:text-gray-700 hover:bg-gray-100">Industries</a>
          <a href="#" className="block px-3 py-2 rounded-md text-base font-medium text-[#202A29] hover:text-gray-700 hover:bg-gray-100">About us</a>
          <a href="#" className="block px-3 py-2 rounded-md text-base font-medium text-[#202A29] hover:text-gray-700 hover:bg-gray-100">Contact</a>
        </div>
      </div> */}
        </header>
        {children}

        <footer className=" text-white  mt-8 absolute bottom-0 w-full ">
          <div className="  text-center">
            <p>&copy; 2025 Cphere. All rights reserved.</p>
          </div>
        </footer>
        <Toaster className="bg-white text-red-200" />
      </body>
    </html>
  );
}
